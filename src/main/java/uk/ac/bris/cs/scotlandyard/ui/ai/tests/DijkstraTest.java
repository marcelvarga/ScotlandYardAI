package uk.ac.bris.cs.scotlandyard.ui.ai.tests;

import com.google.common.collect.ImmutableList;
import org.junit.Test;
import uk.ac.bris.cs.scotlandyard.model.Board.GameState;
import uk.ac.bris.cs.scotlandyard.model.GameSetup;
import uk.ac.bris.cs.scotlandyard.model.MyGameStateFactory;
import uk.ac.bris.cs.scotlandyard.model.Player;
import uk.ac.bris.cs.scotlandyard.ui.ai.tests.TestBase;

import static uk.ac.bris.cs.scotlandyard.model.Piece.Detective.BLUE;
import static uk.ac.bris.cs.scotlandyard.model.Piece.MrX.MRX;
import static uk.ac.bris.cs.scotlandyard.model.ScotlandYard.Ticket.*;
import static uk.ac.bris.cs.scotlandyard.model.ScotlandYard.defaultDetectiveTickets;


/**
 * Tests whether valid moves are generated by the game state
 */
public class DijkstraTest extends TestBase{

    // MrX related tests

    @Test public void testMrXOnlySecretMovesIfOnlySecretMoveTicketsLeft() {
        var mrX = new Player(MRX, makeTickets(0, 0, 0, 0, 1), 104);
        var blue = new Player(BLUE, defaultDetectiveTickets(), 117);

        // only secret moves if only secret move ticket left
        GameState state = gameStateFactory.build(
                new GameSetup(standardGraph(), ImmutableList.of(true)),
                mrX, blue);

        //assertThat(state.getAvailableMoves()).containsExactlyInAnyOrder(
        //        secret(MRX, 104, 86),
        //        secret(MRX, 104, 116));
    }

}
